--QUESTION #1 
SELECT COUNT(u_id) AS wave_users FROM users; 
-- In this question, I am looking out for the number of individual users registered on Wave, and this suggests the SELECT COUNT syntax

--QUESTION #2
SELECT COUNT(transfers_id) AS cfa_transfers FROM transfers
WHERE send_amount_currency='CFA';
--  Just like question 1, we are looking out for a total numbers or counts of a field, in ths case, a specific value in the field send_amount_currency which is CFA.

--QUESTION #3
SELECT COUNT(DISTINCT u_id) AS cfa_user_transfers FROM transfers
WHERE send_amount_currency = 'CFA'; 

--QUESTION #4
SELECT TO_CHAR(TO_DATE (EXTRACT(MONTH FROM when_created)::text, 'MM'), 'Month') AS transaction_month,
COUNT(atx_id) AS num_of_agents FROM agent_transactions
WHERE EXTRACT(YEAR FROM when_created)=2018
GROUP BY EXTRACT(MONTH FROM when_created);
-- Count all transactions from January to December in 2018. To get this, the transactions of each agent across the months will have to be determined.
We will need the agent transaction ID, atx_id from the aget transactions table and the respective timeframe (from the when_created column) within which the transactions where done

--QUESTION #5
SELECT
    CASE WHEN net_value > 0 THEN 'NET WITHDRAWERS'
    ELSE 'NET DEPOSITORS'
    END,
    COUNT(agent_id) AS net_count FROM (SELECT agent_id, sum(amount) AS net_value FROM agent_transactions
    WHERE ((amount < 0) OR (amount > 0)) AND (agent_transactions.when_created > (NOW() - INTERVAL '1 week'))
    GROUP BY agent_id
    ORDER BY agent_id ASC) AS abc
    GROUP BY (net_value > 0)
-- Net depositors - total number (COUNT) of agents with more deposit vol. than withdrawal vol.
Net withdrawers - total number (COUNT) of agents with more withdrawal volume than deposits.
Use of a 'condition' to return a query result of either net depositors or net withdrawer    


--QUESTION #6
CREATE VIEW atx_volume_city_summary AS
SELECT agents.city AS city, COUNT(agent_transactions.atx_id) AS Volume FROM agents 
INNER JOIN agent_transactions 
ON agents.agent_id = agent_transactions.agent_id
WHERE (agent_transactions.when_created > (NOW() - INTERVAL '1 week'))
GROUP BY agents.city
-- Creation of a table by joining fields (identify and create foreign key) from other tables and the use of aliases.
Using the CREATE VIEW, columns can be added on to the table.


--QUESTION #7
CREATE VIEW atx_volume_city_summary_by_country AS
SELECT agents.country AS country, agents.city AS city, COUNT(agent_transactions.atx_id) AS Volume FROM agents 
INNER JOIN agent_transactions 
ON agents.agent_id = agent_transactions.agent_id
WHERE (agent_transactions.when_created > (NOW() - INTERVAL '1 week'))
GROUP BY agents.country, agents.city

--QUESTION #8
CREATE VIEW send_volume_by_country_and_kind AS
SELECT transfers.kind AS transfer_kind, wallets.ledger_location AS country, 
SUM(transfers.send_amount_scalar) AS volume 
FROM transfers 
INNER JOIN wallets 
ON transfers.source_wallet_id = wallets.wallet_id
WHERE (transfers.when_created > (NOW() - INTERVAL '1 week'))                                       
GROUP BY wallets.ledger_location, transfers.kind
                                       
--QUESTION #9
CREATE OR REPLACE VIEW send_volume_by_country_and_kind AS
SELECT transfers.kind AS transfer_kind, wallets.ledger_location AS country,
SUM(transfers.send_amount_scalar) AS volume, COUNT(transfers.send_amount_scalar) AS trans_count,
COUNT(DISTINCT transfers.source_wallet_id) AS unique_senders
FROM transfers
INNER JOIN wallets
ON transfers.source_wallet_id = wallets.wallet_id
WHERE (transfers.when_created > (NOW() - INTERVAL '1 week'))                                      
GROUP BY wallets.ledger_location, transfers.kind;         
                                       
--QUESTION #10
SELECT source_wallet_id, send_amount_scalar FROM transfers 
WHERE send_amount_currency = 'CFA' AND (send_amount_scalar>10000000) AND (transfers.when_created > (NOW() - INTERVAL '1 month'));
